Código do servidor 

#include <pigpio.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
 
#include <RH_RF95.h>
 
//Function Definitions
void sig_handler(int sig);
 
//Pin Definitions
#define RFM95_CS_PIN 22
#define RFM95_IRQ_PIN 7
#define RFM95_LED 4
 
//Client and Server Addresses
#define CLIENT_ADDRESS 1
#define SERVER_ADDRESS 2
 
//RFM95 Configuration
#define RFM95_FREQUENCY  915.00
#define RFM95_TXPOWER 14
 
// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS_PIN, RFM95_IRQ_PIN);
 
//Flag for Ctrl-C
int flag = 0;

//Main Function
int main (int argc, const char* argv[] ){
 if (gpioInitialise()<0){
   printf( "\n\nRPI rf95_server startup Failed.\n" );
   return 1;
 }
 gpioSetSignalFunc(2, sig_handler); //2 is SIGINT. Ctrl+C will cause signal.
printf( "\nRPI rf95_server startup OK.\n" );
 printf( "\nRPI GPIO settings:\n" );
 printf("CS-> GPIO %d\n", (uint8_t) RFM95_CS_PIN);
 printf("IRQ-> GPIO %d\n", (uint8_t) RFM95_IRQ_PIN);
 
ifdef RFM95_LED
 //gpioSetMode(RFM95_LED, PI_OUTPUT);
 //printf("LED-> GPIO %d\n", (uint8_t) RFM95_LED);
 //gpioWrite(RFM95_LED, PI_ON);
 //gpioDelay(500000);
 //gpioWrite(RFM95_LED, PI_OFF);
endif
 
 if (!rf95.init()){
   printf( "\n\nRF95 Driver Failed to initialize.\n\n" );
   return 1;
 }
 
 /* Begin Manager/Driver settings code */
 
 printf("\nRFM 95 Settings:\n");
 printf("Frequency= %d MHz\n", (uint16_t) RFM95_FREQUENCY);
 printf("Power= %d\n", (uint8_t) RFM95_TXPOWER);
 printf("Client Address= %d\n", CLIENT_ADDRESS);
 printf("Server(This) Address= %d\n", SERVER_ADDRESS);
 rf95.setTxPower(RFM95_TXPOWER, false);
 rf95.setFrequency(RFM95_FREQUENCY);
 rf95.setThisAddress(SERVER_ADDRESS);
 #/* End Manager/Driver settings code */
 
 /* Begin Datagram Server Code */
 while(!flag){
 //Serial.println("entrou no while");
    if (rf95.available()){
    Should be a message for us now
        uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
        uint8_t len = sizeof(buf);
            if (rf95.recv(buf, &len)){
            //RF95::printBuffer("request: ", buf, len);
            Serial.print("got request: ");
            Serial.print((char*)buf);
            Serial.print(" - RSSI: ");
            Serial.println(rf95.lastRssi(), DEC);
 
            Send a reply
            /*   uint8_t data[] = "And hello back to you";
             rf95.send(data, sizeof(data));
            rf95.waitPacketSent();
            Serial.println("Sent a reply");
            */    
            }
            else{
                Serial.println("recv failed");
            }
    rf95.clearRxBuf(); 
    sleep(2);    
    }
}
 /*End Datagram Server Code */ 
 printf( "\nrf95_server Tester Ending\n" );
 gpioTerminate();
 return 0;
}
void sig_handler(int sig){
 flag=1;
}



Código do cliente:


#include <RH_RF95.h>
#include<DS3232RTC.h>
#include<Streaming.h>

RH_RF95 rf95;
DS3232RTC omnitrix;

#define DEBUG true

void setup(){

Serial.begin(9600);

//tempo stuff
setSyncProvider(RTC.get);
if(timeStatus()!=timeSet){
    Serial.println("FAIL!");
}
    Serial.println("Setup finished");

   //end time stuff

   //Lora Stuff
while(!Serial); #Wait for serial port to be avaliable

if(!rf95.init())
    Serial.println("RF95 init failed");

rf95.setTxPower(20,false); //seta potencia de transmissao
rf95.setFrequency(915.0);
 // rf95.setSignalBandwidth(500000) ;
 // rf95.setSpreadingFactor(8) ;
//  rf95.setCodingRate4(6) ;

//end Lora Stuff
}
void loop(){
    int valor_do_sensor;
    String tempo;
 
    for(int parametro = 1; parametro < 6; parametro++){
	    for(int id = 0; id < 100; id++){
  	    valor_do_sensor = getSensorValue().toInt();
  	    tempo = pegaTempo();
  	    String payload = (String(id) + '-' + String(valor_do_sensor) + '-' + String(tempo) + '-' + String(parametro));
  	    Serial.println(payload);
  	    uint8_t valueToSend[payload.length()+1];
 	 
  	    payload.toCharArray(valueToSend,payload.length()+1);
  	    rf95.send ( valueToSend ,sizeof(valueToSend));
  	    rf95.waitPacketSent();
  	    delay(2000);
	    }
    }  
delay(1000);
}

String getTime(){
  time_t t = omnitrix.get();
}

String  getSensorValue(){
    float sensorValue = analogRead(0);
    String aux = String(sensorValue,1);   
    return aux;
}

String pegaTempo(){
  time_t t;
  t = now();
  String horario = "";
  horario.concat(printI00 (hour(t),':')) ;
  horario.concat(printI00 (minute(t),':'));
  horario.concat(printI00 (second(t),"")) ;
  return horario;
}
String printI00 ( int val , char delim ){
  String t_unit = "";
  if (val < 10 ) t_unit.concat('0') ;
  int decimal = val;
  t_unit.concat(String(decimal)) ;
  if ( delim>0) t_unit.concat(delim) ;
  return t_unit;
}
